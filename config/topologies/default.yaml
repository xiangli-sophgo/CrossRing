# CrossRing 默认配置

# 网络拓扑参数
TOPO_TYPE: "5x4"  # 格式 AxB，自动计算拓扑参数

# 基本参数
FLIT_SIZE: 128
SLICE_PER_LINK_HORIZONTAL: 7
SLICE_PER_LINK_VERTICAL: 7
BURST: 4
NETWORK_FREQUENCY: 2

# FIFO 深度配置
RB_IN_FIFO_DEPTH: 8
RB_OUT_FIFO_DEPTH: 8
IQ_OUT_FIFO_DEPTH_HORIZONTAL: 6
IQ_OUT_FIFO_DEPTH_VERTICAL: 6
IQ_OUT_FIFO_DEPTH_EQ: 6
EQ_IN_FIFO_DEPTH: 8
IQ_CH_FIFO_DEPTH: 8
EQ_CH_FIFO_DEPTH: 8

# IP 频率变换 FIFO 深度
IP_L2H_FIFO_DEPTH: 3
IP_H2L_H_FIFO_DEPTH: 2
IP_H2L_L_FIFO_DEPTH: 2

# ITag 配置
ITag_TRIGGER_Th_H: 100
ITag_TRIGGER_Th_V: 100
ITag_MAX_Num_H: 1
ITag_MAX_Num_V: 1
# RB only tag 配置（仅在 base_model_v2/network_v2 中生效，base_model/d2d_model 中无效）
RB_ONLY_TAG_NUM_HORIZONTAL: 2
RB_ONLY_TAG_NUM_VERTICAL: 3

# ========== 资源配置 ==========
# 主配置：数据缓冲区大小
RN_RDB_SIZE: 192      # RN读数据缓冲区
RN_WDB_SIZE: 192      # RN写数据缓冲区
SN_DDR_RDB_SIZE: 192  # SN DDR读数据缓冲区
SN_DDR_WDB_SIZE: 192  # SN DDR写数据缓冲区
SN_L2M_RDB_SIZE: 192  # SN L2M读数据缓冲区
SN_L2M_WDB_SIZE: 192  # SN L2M写数据缓冲区

# 次要配置：跟踪器数量（自动计算：databuffer_size / BURST）
RN_R_TRACKER_OSTD: auto    # = RN_RDB_SIZE / BURST 
RN_W_TRACKER_OSTD: auto    # = RN_WDB_SIZE / BURST 
SN_DDR_R_TRACKER_OSTD: auto # = SN_DDR_RDB_SIZE / BURST 
SN_DDR_W_TRACKER_OSTD: auto # = SN_DDR_WDB_SIZE / BURST 
SN_L2M_R_TRACKER_OSTD: auto # = SN_L2M_RDB_SIZE / BURST 
SN_L2M_W_TRACKER_OSTD: auto # = SN_L2M_WDB_SIZE / BURST 

# 资源模式配置
UNIFIED_RW_TRACKER: false   # true=读写共享资源池，false=读写分离

# 带宽限制 (GB/s)
GDMA_BW_LIMIT: 128
SDMA_BW_LIMIT: 128
CDMA_BW_LIMIT: 128
DDR_BW_LIMIT: 128
L2M_BW_LIMIT: 128

# 延迟配置 (cycles)
DDR_R_LATENCY: 0
DDR_R_LATENCY_VAR: 0
DDR_W_LATENCY: 0
L2M_R_LATENCY: 0
L2M_W_LATENCY: 0
SN_TRACKER_RELEASE_LATENCY: 40

# ETag 配置
TL_Etag_T2_UE_MAX: 4
TL_Etag_T1_UE_MAX: 7
TR_Etag_T2_UE_MAX: 6
TU_Etag_T2_UE_MAX: 5
TU_Etag_T1_UE_MAX: 7
TD_Etag_T2_UE_MAX: 6
ETag_BOTHSIDE_UPGRADE: 1

# DMA 读写间隔
GDMA_RW_GAP: 1000000000  # 1e9 (无穷大)
SDMA_RW_GAP: 1000000000  # 1e9 (无穷大)

# 其他功能开关
ENABLE_CROSSPOINT_CONFLICT_CHECK: 0
CROSSRING_VERSION: "V1"
ENABLE_IN_ORDER_EJECTION: 0
IN_ORDER_EJECTION_PAIRS: []
# 需要保序的包类型 (REQ/RSP/DATA)
IN_ORDER_PACKET_CATEGORIES:
  - "REQ"    # 只有REQ类型需要保序

# ========== 仲裁器配置 ==========
# 统一仲裁系统配置，支持多种仲裁算法
arbitration:
  # 全局默认仲裁器类型
  default:
    type: "round_robin"

  # IQ队列仲裁器配置（注入队列仲裁）
  # 用于在多个IP类型间进行仲裁选择
  iq:
    type: "round_robin"    # 标准轮询，确保各IP类型公平

  # EQ队列仲裁器配置（输出队列仲裁）
  # 用于在多个输出端口间进行仲裁选择
  eq:
    type: "round_robin"    # 标准轮询，确保各端口公平

  # RB队列仲裁器配置（环桥仲裁）
  # 用于在环间数据传输时的仲裁选择
  rb:
    type: "round_robin"    # 标准轮询，确保各方向公平

  # 双通道仲裁器配置
  # 用于双通道数据网络的通道选择
  dual_channel:
    type: "round_robin"    # 标准轮询
    # 可选配置示例：
    # type: "priority"     # 固定优先级
    # priorities: [0, 1]   # 通道0优先级高于通道1

# 仲裁器参数说明：
#
# round_robin: 标准轮询仲裁
#   - 特点：绝对公平，无饥饿，可预测
#   - 无需额外参数
#
# weighted: 加权轮询仲裁
#   - 特点：支持差异化服务，保持相对公平
#   - 参数：weights: [权重列表]，如 [3, 2, 1] 表示第0个候选权重3，第1个权重2，第2个权重1
#
# priority: 固定优先级仲裁
#   - 特点：确定性，可能导致低优先级饥饿
#   - 参数：priorities: [优先级列表]，数值越小优先级越高，如 [0, 1, 2]
#
# dynamic: 动态优先级仲裁
#   - 特点：防饥饿，优先级根据等待时间动态调整
#   - 参数：base_priorities: [基础优先级]，aging_factor: 老化因子（默认1.0）
#
# random: 随机仲裁
#   - 特点：无偏向，不可预测，可能短期不公平
#   - 参数：seed: 随机种子（可选，用于测试重现）
#
# token_bucket: 令牌桶仲裁
#   - 特点：流量控制，支持突发，长期公平
#   - 参数：bucket_size: 桶大小，refill_rate: 补充速率，port_rates: 各端口速率列表